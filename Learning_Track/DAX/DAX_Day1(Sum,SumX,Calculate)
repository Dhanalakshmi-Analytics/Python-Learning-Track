What is SUM() in DAX?
Definition:
The SUM() function in DAX adds up (aggregates) all the values in a numeric column.

Syntax:

SUM(<column>)
column: The column containing numeric values you want to total.

üü° It ignores blank values.
üî¥ It does not accept expressions or row-by-row calculations ‚Äî for that, use SUMX().

üß† Simple Example
Table: Sales

OrderID	Region	SalesAmount
1001	East	500
1002	West	300
1003	East	200

Example:
Total Sales = SUM(Sales[SalesAmount])
üìä Result = 500 + 300 + 200 = 1000

üîç Real-World Use Cases (with Filters, Measures, and Relationships)
‚úÖ 1. Total Revenue by Category (Used in Visuals)

Total Revenue = SUM(FactSales[Revenue])
Used in a bar chart with CategoryName from DimProduct ‚Äî automatically filters using relationships.

‚úÖ 2. Conditional Calculation using CALCULATE() + SUM()

East Sales = CALCULATE(
    SUM(Sales[SalesAmount]),
    Sales[Region] = "East"
)
üìä Result: Adds only those rows where Region is East.

‚úÖ 3. Filter Using Slicer Selection

Selected Region Sales = SUM(Sales[SalesAmount])
If you place this in a card visual, and apply a slicer for Region, the measure dynamically updates based on slicer selection.

‚úÖ 4. Sum Over Related Table with Relationship
Imagine this model:

Customer (CustomerID) ‚¨å Sales (CustomerID)
You can do:


Total Sales by Customer = SUM(Sales[SalesAmount])
Then use Customer[Name] in a visual ‚Äî it will auto-filter based on relationship.

‚úÖ 5. SUM + Time Intelligence (via Measures)

Sales This Year = CALCULATE(
    SUM(Sales[SalesAmount]),
    YEAR(Sales[OrderDate]) = YEAR(TODAY())
)
‚úÖ 6. SUM With Virtual Tables (FILTER() Usage)

High Value Sales = CALCULATE(
    SUM(Sales[SalesAmount]),
    FILTER(Sales, Sales[SalesAmount] > 1000)
)
Filters the table to only those rows where SalesAmount > 1000, then sums them.

‚ö†Ô∏è When NOT to Use SUM()
If you want to sum an expression or row-by-row formula, use SUMX() instead:

‚ùå This is invalid:

SUM(Sales[UnitPrice] * Sales[Quantity])  -- ‚ùå Not allowed
‚úÖ Use this instead:

SUMX(Sales, Sales[UnitPrice] * Sales[Quantity])
üîÅ Summary Table
Use Case	Function	Comment
Total of numeric column	SUM()	Simple and fast
Sum with filters	CALCULATE + SUM	Use for filtered totals
Sum with row-wise calculation	üîç What is SUMX()?
Definition:
SUMX() is an iterator function in DAX. It evaluates an expression row by row over a table, then returns the sum of those calculated values.

üìò Syntax:
dax
Copy
Edit
SUMX(<table>, <expression>)
table: The table over which to iterate.

expression: The formula to calculate for each row.

üü¢ Think of it like an Excel formula that calculates in each row, then totals the result.

üîÅ How is SUMX() Different from SUM()?
Feature	SUM()	SUMX()
Works on column only	‚úÖ Yes	‚ùå No (requires expression)
Works on row-by-row	‚ùå No	‚úÖ Yes
Accepts calculated expressions	‚ùå No	‚úÖ Yes
Performance	üü¢ Fast (for simple sums)	üî¥ Slower (row-by-row calc)

‚úÖ Simple Example
Table: Sales
OrderID	Quantity	UnitPrice
1001	2	100
1002	1	500
1003	3	200

‚ùå This won't work:
dax
Copy
Edit
TotalRevenue = SUM(Sales[Quantity] * Sales[UnitPrice])  -- Error!
‚úÖ Use SUMX():
dax
Copy
Edit
TotalRevenue = SUMX(Sales, Sales[Quantity] * Sales[UnitPrice])
üìä Result = (2√ó100) + (1√ó500) + (3√ó200) = 200 + 500 + 600 = 1300

üîç Complex Examples
1Ô∏è‚É£ Sales Amount After Discount
Assume columns:

UnitPrice

Quantity

DiscountPercent

dax
Copy
Edit
Net Sales = SUMX(Sales, Sales[Quantity] * Sales[UnitPrice] * (1 - Sales[DiscountPercent]))
Row-wise discounted total.

2Ô∏è‚É£ Calculate Revenue Only for High Sales
dax
Copy
Edit
High Sales Revenue = SUMX(
    FILTER(Sales, Sales[Quantity] > 5),
    Sales[Quantity] * Sales[UnitPrice]
)
‚û°Ô∏è Sums only rows where Quantity > 5.

3Ô∏è‚É£ Use in Related Table Context (with Relationship)
Assume:

Product[ProductID] ‚Üê‚Üí Sales[ProductID]

Measure in Product table:

dax
Copy
Edit
Total Revenue by Product = SUMX(
    RELATEDTABLE(Sales),
    Sales[Quantity] * Sales[UnitPrice]
)
Iterates over all related rows from Sales for each product.

4Ô∏è‚É£ Dynamic Date Filtering
dax
Copy
Edit
Last 30 Days Sales = SUMX(
    FILTER(Sales, Sales[OrderDate] >= TODAY() - 30),
    Sales[Quantity] * Sales[UnitPrice]
)
5Ô∏è‚É£ With Virtual Table in Measures
dax
Copy
Edit
Top Product Sales = SUMX(
    TOPN(5, Sales, Sales[Quantity] * Sales[UnitPrice], DESC),
    Sales[Quantity] * Sales[UnitPrice]
)
‚û°Ô∏è Sums only top 5 sales based on revenue.

üí° When to Use SUMX()
Scenario	Use SUMX()?
Multiplying two columns row-by-row	‚úÖ Yes
Applying discounts or calculated fields	‚úÖ Yes
Aggregating simple column totals	‚ùå No (use SUM)
Need custom row-level logic	‚úÖ Yes

üìå Summary
SUM() is for direct column sums

SUMX() is for custom, row-level expressions

SUMX() is slower than SUM() ‚Äî use only when needed

Used in calculated measures and custom KPI logicSUMX()	Use for expressions/formulas
Slicer-responsive visuals	SUM()	Dynamic context-aware behavior



CALCULATE() modifies the filter context of a calculation or measure.
It takes an expression (like SUM(), AVERAGE(), etc.) and then applies one or more filters to that expression.

‚úÖ Syntax:
dax
Copy
Edit
CALCULATE(<expression>, <filter1>, <filter2>, ...)
<expression> ‚Üí Any DAX measure or expression (like SUM(Sales[SalesAmount]))

<filter> ‚Üí One or more filter conditions (can be column filters, table filters, or functions like FILTER())

üéØ Why Use CALCULATE()?
To create custom filters inside a measure.

To override slicers or report filters.

To create time intelligence logic (e.g., YTD, MTD).

To add row-level logic inside a visual.

üß† Simple Example
dax
Copy
Edit
East Sales = CALCULATE(
    SUM(Sales[SalesAmount]),
    Sales[Region] = "East"
)
This sums only the SalesAmount for rows where Region = "East".

üîç Real-World Use Cases
‚úÖ 1. Apply Filter Inside a Measure
dax
Copy
Edit
Large Orders Sales = CALCULATE(
    SUM(Sales[SalesAmount]),
    Sales[OrderValue] > 10000
)
‚û°Ô∏è Calculates total sales only for large orders.

‚úÖ 2. Combine with Time Functions
dax
Copy
Edit
Sales Last Year = CALCULATE(
    SUM(Sales[SalesAmount]),
    SAMEPERIODLASTYEAR(Date[Date])
)
‚û°Ô∏è Returns total sales for the same period last year.

‚úÖ 3. Ignore Filters with ALL()
dax
Copy
Edit
Total Sales All Regions = CALCULATE(
    SUM(Sales[SalesAmount]),
    ALL(Sales[Region])
)
‚û°Ô∏è Ignores slicer or visual filters on Region.

‚úÖ 4. Use with FILTER() for Advanced Conditions
dax
Copy
Edit
High Margin Sales = CALCULATE(
    SUM(Sales[SalesAmount]),
    FILTER(Sales, Sales[ProfitMargin] > 0.3)
)
‚û°Ô∏è Custom filter logic ‚Äî filters only rows where margin > 30%.

‚úÖ 5. Multiple Filters
dax
Copy
Edit
East Product A Sales = CALCULATE(
    SUM(Sales[SalesAmount]),
    Sales[Region] = "East",
    Sales[Product] = "Product A"
)
‚û°Ô∏è Filters for a specific region and product.

‚ö†Ô∏è Important Concepts
Concept	Explanation
Filter Context	The current filter applied in visuals/slicers.
CALCULATE modifies it	Adds, replaces, or removes filters.
Context transition	Converts row context to filter context in calculated columns.
Works only with expressions	Can‚Äôt use as a standalone function.

üÜö CALCULATE() vs FILTER()
Feature	CALCULATE()	FILTER()
Main Purpose	Modify filter context	Return filtered table
Returns	Scalar value (like SUM result)	Table
Used Inside	Measures	Often inside CALCULATE

üìå Summary Table
Use Case	Example
Sum with filter	CALCULATE(SUM(Sales[Amount]), Region = "East")
Time intelligence	SAMEPERIODLASTYEAR(Date[Date])
Remove filters	ALL(), REMOVEFILTERS()
Complex filters	FILTER(Sales, Sales[Profit] > 5000)
